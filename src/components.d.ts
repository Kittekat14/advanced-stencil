/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface FdkSpinner {
    }
    interface FdkStockFinder {
    }
    interface FdkStockPrice {
        "stockSymbol": string;
    }
}
export interface FdkStockFinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFdkStockFinderElement;
}
declare global {
    interface HTMLFdkSpinnerElement extends Components.FdkSpinner, HTMLStencilElement {
    }
    var HTMLFdkSpinnerElement: {
        prototype: HTMLFdkSpinnerElement;
        new (): HTMLFdkSpinnerElement;
    };
    interface HTMLFdkStockFinderElementEventMap {
        "fdkSymbolSelected": string;
    }
    interface HTMLFdkStockFinderElement extends Components.FdkStockFinder, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFdkStockFinderElementEventMap>(type: K, listener: (this: HTMLFdkStockFinderElement, ev: FdkStockFinderCustomEvent<HTMLFdkStockFinderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFdkStockFinderElementEventMap>(type: K, listener: (this: HTMLFdkStockFinderElement, ev: FdkStockFinderCustomEvent<HTMLFdkStockFinderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFdkStockFinderElement: {
        prototype: HTMLFdkStockFinderElement;
        new (): HTMLFdkStockFinderElement;
    };
    interface HTMLFdkStockPriceElement extends Components.FdkStockPrice, HTMLStencilElement {
    }
    var HTMLFdkStockPriceElement: {
        prototype: HTMLFdkStockPriceElement;
        new (): HTMLFdkStockPriceElement;
    };
    interface HTMLElementTagNameMap {
        "fdk-spinner": HTMLFdkSpinnerElement;
        "fdk-stock-finder": HTMLFdkStockFinderElement;
        "fdk-stock-price": HTMLFdkStockPriceElement;
    }
}
declare namespace LocalJSX {
    interface FdkSpinner {
    }
    interface FdkStockFinder {
        "onFdkSymbolSelected"?: (event: FdkStockFinderCustomEvent<string>) => void;
    }
    interface FdkStockPrice {
        "stockSymbol"?: string;
    }
    interface IntrinsicElements {
        "fdk-spinner": FdkSpinner;
        "fdk-stock-finder": FdkStockFinder;
        "fdk-stock-price": FdkStockPrice;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fdk-spinner": LocalJSX.FdkSpinner & JSXBase.HTMLAttributes<HTMLFdkSpinnerElement>;
            "fdk-stock-finder": LocalJSX.FdkStockFinder & JSXBase.HTMLAttributes<HTMLFdkStockFinderElement>;
            "fdk-stock-price": LocalJSX.FdkStockPrice & JSXBase.HTMLAttributes<HTMLFdkStockPriceElement>;
        }
    }
}
